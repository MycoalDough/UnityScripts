[Header("Timers")]
public float timeR; maxTimeR;
public float timeL; maxTimeL;

public GameObject rain;
public GameObject lightning;

public bool moveLeft;

void Start()
{
  StartCourintine(destroyAfterTime());
}

void Update()
{
  //movement, determines left or right
  if(moveLeft)
  {
    //moveLeft
  }
  else if(!moveLeft)
  {
    //moveRight
  }
  
  //rainTime
  if(timeR < maxTimeR)
  {
    timeR = timeR + Time.DeltaTime;
  }
  else
  {
    timeR = 0;
    Instantiate(rain, gameObject.transform.position, Quarternion.Identity);
  }
  
  //lightning time
    if(timeL < maxTimeL)
  {
    timeL = timeL + Time.DeltaTime;
  }
  else
  {
    timeL = 0;
    Instantiate(lightning, gameObject.transform.position, Quarternion.Identity);
  }
}


IENumerator destroyAfterTime()
{
  yield return new WaitForSeconds(5);
  Destroy(gameObject);
}
